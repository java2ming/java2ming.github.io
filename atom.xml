<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://java2ming.github.io/"/>
  <updated>2018-06-08T12:47:14.434Z</updated>
  <id>https://java2ming.github.io/</id>
  
  <author>
    <name>Java Ming</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>平安面试题</title>
    <link href="https://java2ming.github.io/2018/06/08/pingan-interview/"/>
    <id>https://java2ming.github.io/2018/06/08/pingan-interview/</id>
    <published>2018-06-08T12:43:00.000Z</published>
    <updated>2018-06-08T12:47:14.434Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>在平安面试了 整理下平安的面试题</p></blockquote><p></p><h4>平安面试题 第一轮 </h4><br>1.自我介绍<p></p><blockquote><p>O(∩_∩)O哈哈~ 紧张了 ，没说好，还是需要提前组织下语言滴！！！</p></blockquote><p>2.电话号码的正则表达式</p><blockquote><p>^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\d{8}$</p></blockquote><p>3.nginx的实现原理</p><blockquote><p>nginx使用的是异步非阻塞的方式，Apache采用每个进程负责一个会话的方式，当这个会话关闭后这个进程才会被释放。而Nginx是每个请求由worker进程负责，在需要等待后端服务器返回数据的时候，worker会注册一个事件，当请求返回后通知到我，我接着干，然后他就会等待处理新的请求</p></blockquote><p>4.Spring的IOC、AOP</p><blockquote><ul><li><strong>IOC</strong> : 依赖注入、控制反转。<br>平常开发中，通常是new一个依赖类再调用类实例的方法，而这种new出来的实例不好统一管理。Spring的依赖注入就是由Spring容器帮助我们初始化实例并注入到需要的类中</li></ul></blockquote><p> <strong>IOC实现方式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Set注入</span><br><span class="line">2. 构造器注入</span><br><span class="line">3. 静态工厂的方法注入</span><br><span class="line">4. 实例工厂的方法注入</span><br></pre></td></tr></table></figure></p><blockquote><ul><li><strong>AOP</strong> : 面向切面编程<br>将多个类的公共行为封装到一个可重用的模块，减少系统的重复代码，降低模块之间的耦合度。比如权限的验证，日志的记录都会使用到AOP</li></ul></blockquote><p>5.JVM的工作原理</p><blockquote><p>Java是一种技术，它由四方面组成：Java编程语言、Java类文件格式、Java虚拟机和Java应用程序接口(Java API)。它们的关系如下图所示：<br><img src="https://raw.githubusercontent.com/java2ming/image/master/java/jvm/1.gif" alt="enter image description here"></p></blockquote><p>6.SpringCloud实现负载均衡的组件</p><blockquote><p>###<strong>Spring Cloud各组件总结归纳</strong></p><h4 id="润物无声，融合在每个微服务中、依赖其它组件并为其提供服务。"><a href="#润物无声，融合在每个微服务中、依赖其它组件并为其提供服务。" class="headerlink" title="润物无声，融合在每个微服务中、依赖其它组件并为其提供服务。"></a>润物无声，融合在每个微服务中、依赖其它组件并为其提供服务。</h4><ul><li><strong>Ribbon</strong>，客户端负载均衡，特性有区域亲和、重试机制。</li><li><strong>Hystrix</strong>，客户端容错保护，特性有服务降级、服务熔断、请求缓存、请求合并、依赖隔离。</li><li><strong>Feign</strong>，声明式服务调用，本质上就是Ribbon+Hystrix。</li><li><strong>Bus</strong>，消息总线，配合Config仓库修改的一种Stream实现，</li><li><strong>Sleuth</strong>，分布式服务追踪，需要搞清楚TraceID和SpanID以及抽样，如何与ELK整合。</li><li><strong>Stream</strong>，消息驱动，有Sink、Source、Processor三种通道，特性有订阅发布、消费组、消息分区。<h4 id="独挑大梁，独自启动不需要依赖其它组件。"><a href="#独挑大梁，独自启动不需要依赖其它组件。" class="headerlink" title="独挑大梁，独自启动不需要依赖其它组件。"></a>独挑大梁，独自启动不需要依赖其它组件。</h4><ul><li><strong>Eureka</strong>，服务注册中心，特性有失效剔除、服务保护。</li><li><strong>Dashboard</strong>，Hystrix仪表盘，监控集群模式和单点模式，其中集群模式需要收集器Turbine配合。</li><li><strong>Zuul</strong>，API服务网关，功能有路由分发和过滤。</li><li><strong>Config</strong>，分布式配置中心，支持本地仓库、SVN、Git、Jar包内配置等模式，<h4 id="每个组件都不是平白无故的产生的，是为了解决某一特定的问题而存在。"><a href="#每个组件都不是平白无故的产生的，是为了解决某一特定的问题而存在。" class="headerlink" title="每个组件都不是平白无故的产生的，是为了解决某一特定的问题而存在。"></a>每个组件都不是平白无故的产生的，是为了解决某一特定的问题而存在。</h4></li></ul><ol><li>Eureka和Ribbon，是最基础的组件，一个注册服务，一个消费服务。</li><li>Hystrix为了优化Ribbon、防止整个微服务架构因为某个服务节点的问题导致崩溃，是个保险丝的作用。</li><li>Dashboard给Hystrix统计和展示用的，而且监控服务节点的整体压力和健康情况。</li><li>Turbine是集群收集器，服务于Dashboard的。</li><li>Feign是方便我们程序员些更优美的代码的。</li><li>Zuul是加在整个微服务最前沿的防火墙和代理器，隐藏微服务结点IP端口信息，加强安全保护的。</li><li>Config是为了解决所有微服务各自维护各自的配置，设置一个同意的配置中心，方便修改配置的。</li><li>Bus是因为config修改完配置后各个结点都要refresh才能生效实在太麻烦，所以交给bus来通知服务节点刷新配置的。</li><li>Stream是为了简化研发人员对MQ使用的复杂度，弱化MQ的差异性，达到程序和MQ松耦合。</li><li>Sleuth是因为单次请求在微服务节点中跳转无法追溯，解决任务链日志追踪问题的。<br>####特殊成员Zipkin<br>之所以特殊是因为从jar包和包名来看它不属于Spring Cloud的一员，但是它与Spring Cloud Sleuth的抽样日志结合的天衣无缝。乍一看它与Hystrix的Dashboard作用有重叠的部分，但是他们的侧重点完全不同。Dashboard侧重的是单个服务的统计和是否可用，Zipkin侧重的监控环节时长。简言之，Dashboard侧重故障诊断，Ziokin侧重性能优化。</li></ol></li></ul></blockquote><p>7.了解过微服务框架吗</p><blockquote><p>SpringBoot</p></blockquote><p>8.StringBuffer、StringBuliuder的区别</p><blockquote><p>StringBuilder:是 Java 5 中引入的，它和 StringBuffer 的方法完全相同，区别在于它是在单线程环境下使用的， 因为它的所有方面都没有被 synchronized 修饰，因此它的效率也比 StringBuffer  要高</p></blockquote><p>9.Java中有多少种排序算法，说说自己熟悉的算法<br><a href="http://www.runoob.com/w3cnote/sort-algorithm-summary.html" target="_blank" rel="noopener">排序算法总结–菜鸟教程</a></p><p>10.常用的设计模式<br><a href="http://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">设计模式–菜鸟教程</a></p><p>11.为什么不使用select *</p><blockquote><p>其实走不走索引，关键取决于where后面包括还是不包括创建聚集索引的时候的第一个字段<br>或者创建非聚集索引的时候的第一个字段；跟select <em>没有关系的，select </em> 最大的影响就是额外的IO开销</p></blockquote><p>12.了解过Redis的实现原理吗</p><blockquote><p>Redis 为了达到最快的读写速度将数据都读到内存中，并通过异步的方式将数据写入磁盘。所以 redis 具有快速和 数据持久化的特征。如果不将数据放在内存中，磁盘 I/O 速度为严重影响 redis 的性能</p><h4 id="Redis数据结构：-五种"><a href="#Redis数据结构：-五种" class="headerlink" title="Redis数据结构： 五种"></a>Redis数据结构： 五种</h4><p>String——字符串<br>Hash——字典<br>List——列表<br>Set——集合<br>Sorted Set——有序集合</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="java" scheme="https://java2ming.github.io/tags/java/"/>
    
      <category term="面试题" scheme="https://java2ming.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="平安" scheme="https://java2ming.github.io/tags/%E5%B9%B3%E5%AE%89/"/>
    
  </entry>
  
  <entry>
    <title>java常见面试题【1】</title>
    <link href="https://java2ming.github.io/2018/06/08/java-interview-1/"/>
    <id>https://java2ming.github.io/2018/06/08/java-interview-1/</id>
    <published>2018-06-08T09:30:00.000Z</published>
    <updated>2018-06-08T12:16:25.008Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>近期再找工作,复习一波面试题，整理一下常见的Java面试题</p></blockquote><a id="more"></a><h4> ArrayList的默认长度</h4><br>&gt; ArrayList的底层是由一个Object[]数组构成的，而这个Object[]数组，默认的长度是10,size()方法，指的是“逻辑”长度。<br>所谓“逻辑”长度，是指内存已存在的“实际元素的长度” 而“空元素不被计算”<br>        即：当你利用add()方法，向ArrayList内添加一个“元素”时，逻辑长度就增加1位。 而剩下的9个空元素不被计算。<br>        每次增长 (旧容量*3/2)+1<br><br><h4> Lock与synchronized 的区别</h4><blockquote><ol><li>线程A和B都要获取对象O的锁定，假设A获取了对象O锁，B将等待A释放对O的锁定，<br> 如果使用 synchronized ，如果A不释放，B将一直等下去，不能被中断<br>如果使用 ReentrantLock，如果A不释放，可以使B在等待了足够长的时间以后，中断等待，而干别的事情</li><li>synchronized是在JVM层面上实现的，不但可以通过一些监控工具监控synchronized的锁定，而且在代码执行时出现异常，JVM会自动释放锁定，但是使用Lock则不行，lock是通过代码实现的，要保证锁定一定会被释放，就必须将unLock()放到finally{}中</li><li>在资源竞争不是很激烈的情况下，Synchronized的性能要优于ReetrantLock，但是在资源竞争很激烈的情况下，Synchronized的性能会下降几十倍，但是ReetrantLock的性能能维持常态</li></ol></blockquote><h4>mysql索引类型</h4><br>1. 普通索引<br>2. 唯一索引<br>3. 主键索引<br>4. 组合索引<br>5. 全文索引<br><br><h4>事务特性</h4><blockquote><p>事务特性分为四个：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持续性（Durability）简称ACID。</p></blockquote><ul><li><strong>原子性（Atomicity）</strong>:   事务是数据库逻辑工作单元，事务中包含的操作要么都执行成功，要么都执行失败。</li><li><strong>一致性（Consistency）</strong>： 事务执行的结果必须是使数据库数据从一个一致性状态变到另外一种一致性状态。当事务执行成功后就说数据库处于一致性状态。如果在执行过程中发生错误，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这是数据库就处于不一致状态。</li><li><strong>隔离性（Isolation）</strong>：一个事务的执行过程中不能影响到其他事务的执行，即一个事务内部的操作及使用的数据对其他事务是隔离的，并发执行各个事务之间无不干扰。</li><li><strong>持续性（Durability）</strong>：即一个事务执一旦提交，它对数据库数据的改变是永久性的。之后的其它操作不应该对其执行结果有任何影响。</li></ul><h4>事务的隔离级别</h4><blockquote><ol><li>事务的隔离级别也分为四种，由低到高依次分别为：</li></ol><ul><li><strong>read uncommited（读未提交）</strong>：是最低的事务隔离级别，它允许另外一个事务可以看到这个事务未提交的数据。</li><li><strong>read commited（读提交）</strong>：保证一个事物提交后才能被另外一个事务读取。另外一个事务不能读取该事物未提交的数据。</li><li><strong>read repeatable（读重复）</strong>：这种事务隔离级别可以防止脏读，不可重复读。但是可能会出现幻象读。它除了保证一个事务不能被另外一个事务读取未提交的数据之外还避免了以下情况产生（不可重复读）。</li><li><strong>serializable（序列化）</strong>：这是花费最高代价但最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读之外，还避免了幻象读。</li></ul></blockquote><blockquote><ol start="2"><li>脏读、不可重复读、幻象读概念说明：</li></ol><ul><li><strong>脏读</strong>：指当一个事务正字访问数据，并且对数据进行了修改，而这种数据还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据还没有提交那么另外一个事务读取到的这个数据我们称之为脏数据。依据脏数据所做的操作肯能是不正确的。</li><li><strong>不可重复读</strong>：指在一个事务内，多次读同一数据。在这个事务还没有执行结束，另外一个事务也访问该同一数据，那么在第一个事务中的两次读取数据之间，由于第二个事务的修改第一个事务两次读到的数据可能是不一样的，这样就发生了在一个事物内两次连续读到的数据是不一样的，这种情况被称为是不可重复读。</li><li><strong>幻读</strong>：一个事务先后读取一个范围的记录，但两次读取的纪录数不同，我们称之为幻象读（两次执行同一条 select 语句会出现不同的结果，第二次读会增加一数据行，并没有说这两次执行是在同一个事务中）</li></ul></blockquote><p></p><h4>spring事务传播特性</h4><br>    &gt; 事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。spring支持7种事务传播行为：<p></p><ul><li><strong>propagation_requierd</strong>：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。</li><li><strong>propagation_supports</strong>：支持当前事务，如果没有当前事务，就以非事务方法执行。</li><li><strong>propagation_mandatory</strong>：使用当前事务，如果没有当前事务，就抛出异常。</li><li><strong>propagation_required_new</strong>：新建事务，如果当前存在事务，把当前事务挂起。</li><li><strong>propagation_not_supported</strong>：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li><strong>propagation_never</strong>：以非事务方式执行操作，如果当前事务存在则抛出异常。</li><li><strong>propagation_nested</strong>：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作<blockquote><p>Spring 默认的事务传播行为是 PROPAGATION_REQUIRED，它适合于绝大多数的情况。假设 ServiveX#methodX() 都工作在事务环境下（即都被 Spring 事务增强了），假设程序中存在如下的调用链：Service1#method1()-&gt;Service2#method2()-&gt;Service3#method3()，那么这 3 个服务类的 3 个方法通过 Spring 的事务传播机制都工作在同一个事务中。</p></blockquote></li></ul><p></p><h4>SQL数据库中的范式</h4><br>    &gt; 事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。spring支持7种事务传播行为：<p></p><ul><li><p><strong>第一范式（1NF）</strong>：强调的是列的原子性，即列不能够再分成其他几列。</p><blockquote><p>考虑这样一个表：【联系人】（姓名，性别，电话）<br>如果在实际场景中，一个联系人有家庭电话和公司电话，那么这种表结构设计就没有达到 1NF。要符合 1NF 我们只需把列（电话）拆分，即：【联系人】（姓名，性别，家庭电话，公司电话）。1NF 很好辨别，但是 2NF 和 3NF 就容易搞混淆。</p></blockquote></li><li><p><strong>第二范式（2NF）</strong>：首先是 1NF，另外包含两部分内容，一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。</p><blockquote><p>考虑一个订单明细表：【OrderDetail】（OrderID，ProductID，UnitPrice，Discount，Quantity，ProductName）。<br>因为我们知道在一个订单中可以订购多种产品，所以单单一个 OrderID 是不足以成为主键的，主键应该是（OrderID，ProductID）。显而易见 Discount（折扣），Quantity（数量）完全依赖（取决）于主键（OderID，ProductID），而 UnitPrice，ProductName 只依赖于 ProductID。所以 OrderDetail 表不符合 2NF。不符合 2NF 的设计容易产生冗余数据。<br>可以把【OrderDetail】表拆分为【OrderDetail】（OrderID，ProductID，Discount，Quantity）和【Product】（ProductID，UnitPrice，ProductName）来消除原订单表中UnitPrice，ProductName多次重复的情况。</p></blockquote></li><li><p><strong>第三范式（3NF）</strong>：首先是 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。</p><blockquote><p>考虑一个订单表【Order】（OrderID，OrderDate，CustomerID，CustomerName，CustomerAddr，CustomerCity）主键是（OrderID）。<br>其中 OrderDate，CustomerID，CustomerName，CustomerAddr，CustomerCity 等非主键列都完全依赖于主键（OrderID），所以符合 2NF。不过问题是 CustomerName，CustomerAddr，CustomerCity 直接依赖的是 CustomerID（非主键列），而不是直接依赖于主键，它是通过传递才依赖于主键，所以不符合 3NF。<br>通过拆分【Order】为【Order】（OrderID，OrderDate，CustomerID）和【Customer】（CustomerID，CustomerName，CustomerAddr，CustomerCity）从而达到 3NF。</p></blockquote><p>  第二范式（2NF）和第三范式（3NF）的概念很容易混淆，区分它们的关键点在于，2NF：非主键列是否完全依赖于主键，还是依赖于主键的一部分；3NF：非主键列是直接依赖于主键，还是直接依赖于非主键列。</p></li></ul><p></p><h4>JDK并发包 java.util.concurrent</h4><br><img src="https://raw.githubusercontent.com/java2ming/image/master/java/concurrent/1.jpg" alt="Alt text"><p></p><blockquote><p>外层框架主要有Lock(ReentrantLock、ReadWriteLock等)、同步器（semaphores等）、阻塞队列（BlockingQueue等）、Executor（线程池）、并发容器（ConcurrentHashMap等）、还有Fork/Join框架；<br>内层有AQS（AbstractQueuedSynchronizer类，锁功能都由他实现）、非阻塞数据结构、原子变量类(AtomicInteger等无锁线程安全类)三种。<br>底层就实现是volatile和CAS。整个并发包其实都是由这两种思想构成的。</p></blockquote><p></p><h4>JDK8新特性</h4><p></p><blockquote><p> <strong>Lambda 表达式</strong> − Lambda允许把函数作为一个方法的参数（函数作为参数传递进方法中)。<br>    <strong>方法引用</strong> − 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。<br>    <strong>默认方法</strong> − 默认方法就是一个在接口里面有了一个实现的方法。新增了default方法和static方法，这两种方法可以有方法体<br>    <strong>新工具 − 新的编译工具</strong>，如：Nashorn引擎 jjs、 类依赖分析器jdeps。<br>    <strong>Stream API</strong> −新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。<br>    <strong>Date Time API</strong> − 加强对日期与时间的处理。<br>    <strong>Optional 类</strong> − Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。<br>    <strong>Nashorn, JavaScript 引擎</strong> − Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。</p></blockquote><p></p><h4>UDP、TCP区别</h4><p></p><blockquote><p>TCP是建立可靠连接，并且通信双方都可以以流的形式发送数据。相对TCP，UDP则是面向无连接的协议。<br>使用UDP协议时，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发数据包。但是，能不能到达就不知道了。<br>虽然用UDP传输数据不可靠，但它的优点是和TCP比，速度快，对于不要求可靠到达的数据，就可以使用UDP协议。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;近期再找工作,复习一波面试题，整理一下常见的Java面试题&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://java2ming.github.io/tags/java/"/>
    
      <category term="面试题" scheme="https://java2ming.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
