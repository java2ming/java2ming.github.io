<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>java常见面试题【2】</title>
      <link href="/2018/06/09/java-interview-2/"/>
      <url>/2018/06/09/java-interview-2/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>java常见面试题 第二波</p></blockquote><a id="more"></a><h4 id="深入研究java-lang-ThreadLocal类"><a href="#深入研究java-lang-ThreadLocal类" class="headerlink" title="深入研究java.lang.ThreadLocal类"></a>深入研究java.lang.ThreadLocal类</h4><blockquote><p>Synchronized实现内存共享，ThreadLocal为每个线程维护一个本地变量。<br>采用空间换时间，它用于线程间的数据隔离，为每一个使用该变量的线程提供一个副本，每个线程都可以独立地改变自己的副本，而不会和其他线程的副本冲突。<br>ThreadLocal类中维护一个Map，用于存储每一个线程的变量副本，Map中元素的键为线程对象，而值为对应线程的变量副本。<br>ThreadLocal在Spring中发挥着巨大的作用，在管理Request作用域中的Bean、事务管理、任务调度、AOP等模块都出现了它的身影。<br>Spring中绝大部分Bean都可以声明成Singleton作用域，采用ThreadLocal进行封装，因此有状态的Bean就能够以singleton的方式在多线程中正常工作了。</p></blockquote><h4 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h4><blockquote><p>Java虚拟机规范中将Java运行时数据分为六种。</p><ol><li>程序计数器：是一个数据结构，用于保存当前正常执行的程序的内存地址。Java虚拟机的多线程就是通过线程轮流切换并分配处理器时间来实现的，为了线程切换后能恢复到正确的位置，每条线程都需要一个独立的程序计数器，互不影响，该区域为“线程私有”。</li><li>Java虚拟机栈：线程私有的，与线程生命周期相同，用于存储局部变量表，操作栈，方法返回值。局部变量表放着基本数据类型，还有对象的引用。</li><li>本地方法栈：跟虚拟机栈很像，不过它是为虚拟机使用到的Native方法服务。</li><li>Java堆：所有线程共享的一块内存区域，对象实例几乎都在这分配内存。</li><li>方法区：各个线程共享的区域，储存虚拟机加载的类信息，常量，静态变量，编译后的代码。</li><li>运行时常量池：代表运行时每个class文件中的常量表。包括几种常量：编译时的数字常量、方法或者域的引用。</li></ol></blockquote><h4 id="java-GC是在什么时候，对什么东西，做了什么事情"><a href="#java-GC是在什么时候，对什么东西，做了什么事情" class="headerlink" title="java GC是在什么时候，对什么东西，做了什么事情"></a>java GC是在什么时候，对什么东西，做了什么事情</h4><blockquote><p><strong>在什么时候</strong>：</p><ol><li>新生代有一个Eden区和两个survivor区，首先将对象放入Eden区，如果空间不足就向其中的一个survivor区上放，如果仍然放不下就会引发一次发生在新生代的minor GC，将存活的对象放入另一个survivor区中，然后清空Eden和之前的那个survivor区的内存。在某次GC过程中，如果发现仍然又放不下的对象，就将这些对象放入老年代内存里去。</li><li>大对象以及长期存活的对象直接进入老年区。</li><li>当每次执行minor GC的时候应该对要晋升到老年代的对象进行分析，如果这些马上要到老年区的老年对象的大小超过了老年区的剩余大小，那么执行一次Full GC以尽可能地获得老年区的空间。  </li></ol></blockquote><blockquote><p><strong>对什么东西</strong>：<br>从GC Roots搜索不到，而且经过一次标记清理之后仍没有复活的对象。</p></blockquote><blockquote><p><strong>做什么</strong>：<br>新生代：复制清理；<br>老年代：标记-清除和标记-压缩算法；<br>永久代：存放Java中的类和加载类的类加载器本身。</p></blockquote><blockquote><p><strong>GC Roots都有哪些</strong>： </p><ol><li>虚拟机栈中的引用的对象 </li><li>方法区中静态属性引用的对象，常量引用的对象 </li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象。</li></ol></blockquote><h4 id="CAS（Compare-And-Swap）-无锁算法"><a href="#CAS（Compare-And-Swap）-无锁算法" class="headerlink" title="CAS（Compare And Swap） 无锁算法"></a>CAS（Compare And Swap） 无锁算法</h4><blockquote><p>CAS是乐观锁技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。</p></blockquote><h4 id="类加载器工作机制"><a href="#类加载器工作机制" class="headerlink" title="类加载器工作机制"></a>类加载器工作机制</h4><blockquote><ol><li>装载：将Java二进制代码导入jvm中，生成Class文件。 </li><li>连接：a）校验：检查载入Class文件数据的正确性 b）准备：给类的静态变量分配存储空间 c）解析：将符号引用转成直接引用 </li><li>初始化：对类的静态变量，静态方法和静态代码块执行初始化工作。</li></ol></blockquote><blockquote><p>双亲委派模型：类加载器收到类加载请求，首先将请求委派给父类加载器完成<br>用户自定义加载器-&gt;应用程序加载器-&gt;扩展类加载器-&gt;启动类加载器。 </p></blockquote><h4 id="索引：B-，B-全文索引"><a href="#索引：B-，B-全文索引" class="headerlink" title="索引：B+，B-,全文索引"></a>索引：B+，B-,全文索引</h4><blockquote><p>Mysql的索引是一个数据结构，旨在使数据库高效的查找数据。<br>常用的数据结构是B+Tree，每个叶子节点不但存放了索引键的相关信息还增加了指向相邻叶子节点的指针，这样就形成了带有顺序访问指针的B+Tree，做这个优化的目的是提高不同区间访问的性能。 </p></blockquote><blockquote><p><strong>什么时候使用索引</strong>： </p><ol><li>经常出现在group by,order by和distinc关键字后面的字段 </li><li>经常与其他表进行连接的表，在连接字段上应该建立索引 </li><li>经常出现在Where子句中的字段 </li><li>经常出现用作查询选择的字段</li></ol></blockquote><h4 id="Spring-IOC-（控制反转，依赖注入）"><a href="#Spring-IOC-（控制反转，依赖注入）" class="headerlink" title="Spring IOC （控制反转，依赖注入）"></a>Spring IOC （控制反转，依赖注入）</h4><blockquote><p>Spring支持三种依赖注入方式，分别是属性（Setter方法）注入，构造注入和接口注入。<br>在Spring中，那些组成应用的主体及由Spring IOC容器所管理的对象被称之为Bean。</p></blockquote><blockquote><p>Spring的IOC容器通过反射的机制实例化Bean并建立Bean之间的依赖关系。<br>简单地讲，Bean就是由Spring IOC容器初始化、装配及被管理的对象。<br>获取Bean对象的过程，首先通过Resource加载配置文件并启动IOC容器，然后通过getBean方法获取bean对象，就可以调用他的方法。<br><strong>Spring Bean的作用域：</strong><br>Singleton：Spring IOC容器中只有一个共享的Bean实例，一般都是Singleton作用域。<br>Prototype：每一个请求，会产生一个新的Bean实例。<br>Request：每一次http请求会产生一个新的Bean实例。</p></blockquote><h4 id="Java代理"><a href="#Java代理" class="headerlink" title="Java代理"></a>Java代理</h4><blockquote><p>代理的共有优点：业务类只需要关注业务逻辑本身，保证了业务类的重用性。 </p></blockquote><blockquote><p><strong>Java静态代理：</strong><br>代理对象和目标对象实现了相同的接口，目标对象作为代理对象的一个属性，具体接口实现中，代理对象可以在调用目标对象相应方法前后加上其他业务处理逻辑。<br>缺点：一个代理类只能代理一个业务类。如果业务类增加方法时，相应的代理类也要增加方法。 </p></blockquote><blockquote><p><strong>Java动态代理：</strong><br>Java动态代理是写一个类实现InvocationHandler接口，重写Invoke方法，在Invoke方法可以进行增强处理的逻辑的编写，这个公共代理类在运行的时候才能明确自己要代理的对象，同时可以实现该被代理类的方法的实现，然后在实现类方法的时候可以进行增强处理。<br>实际上：代理对象的方法 = 增强处理 + 被代理对象的方法</p></blockquote><blockquote><p><strong>JDK和CGLIB生成动态代理类的区别：</strong><br>JDK动态代理只能针对实现了接口的类生成代理（实例化一个类）。此时代理对象和目标对象实现了相同的接口，目标对象作为代理对象的一个属性，具体接口实现中，可以在调用目标对象相应方法前后加上其他业务处理逻辑<br>CGLIB是针对类实现代理，主要是对指定的类生成一个子类（没有实例化一个类），覆盖其中的方法 。 </p></blockquote><blockquote><p><strong>Spring AOP应用场景</strong><br>性能检测，访问控制，日志管理，事务等。<br>默认的策略是如果目标类实现接口，则使用JDK动态代理技术，如果目标对象没有实现接口，则默认会采用CGLIB代理</p></blockquote><h4 id="SpringMVC运行原理"><a href="#SpringMVC运行原理" class="headerlink" title="SpringMVC运行原理"></a>SpringMVC运行原理</h4><blockquote><ol><li>客户端请求提交到DispatcherServlet </li><li>由DispatcherServlet控制器查询HandlerMapping，找到并分发到指定的Controller中。 </li><li>Controller调用业务逻辑处理后，返回ModelAndView </li><li>DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图 </li><li>视图负责将结果显示到客户端</li></ol></blockquote><h4 id="Http请求"><a href="#Http请求" class="headerlink" title="Http请求"></a>Http请求</h4><blockquote><p><strong>请求过程：</strong><br>DNS域名解析 –&gt; 发起TCP的三次握手 –&gt; 建立TCP连接后发起http请求 –&gt; 服务器响应http请求，浏览器得到html代码 –&gt; 浏览器解析html代码，并请求html代码中的资源（如javascript、css、图片等） –&gt; 浏览器对页面进行渲染呈现给用户</p></blockquote><blockquote><p><strong>设计存储海量数据的存储系统</strong>：<br>设计一个叫“中间层”的一个逻辑层，在这个层，将数据库的海量数据抓出来，做成缓存，运行在服务器的内存中，同理，当有新的数据到来，也先做成缓存，再想办法，持久化到数据库中，这是一个简单的思路。主要的步骤是负载均衡，将不同用户的请求分发到不同的处理节点上，然后先存入缓存，定时向主数据库更新数据。读写的过程采用类似乐观锁的机制，可以一直读（在写数据的时候也可以），但是每次读的时候会有个版本的标记，如果本次读的版本低于缓存的版本，会重新读数据，这样的情况并不多，可以忍受。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>平安面试题</title>
      <link href="/2018/06/08/pingan-interview/"/>
      <url>/2018/06/08/pingan-interview/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>在平安面试了 整理下平安的面试题</p></blockquote><a id="more"></a><h4 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h4><blockquote><p> 面试必备题目哈！还是提前组织下语言哦</p></blockquote><h4 id="电话号码的正则表达式"><a href="#电话号码的正则表达式" class="headerlink" title="电话号码的正则表达式"></a>电话号码的正则表达式</h4><blockquote><p>^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\d{8}$</p></blockquote><h4 id="nginx的实现原理"><a href="#nginx的实现原理" class="headerlink" title="nginx的实现原理"></a>nginx的实现原理</h4><blockquote><p>nginx使用的是异步非阻塞的方式，Apache采用每个进程负责一个会话的方式，当这个会话关闭后这个进程才会被释放。而Nginx是每个请求由worker进程负责，在需要等待后端服务器返回数据的时候，worker会注册一个事件，当请求返回后通知到我，我接着干，然后他就会等待处理新的请求</p></blockquote><h4 id="Spring的IOC、AOP"><a href="#Spring的IOC、AOP" class="headerlink" title="Spring的IOC、AOP"></a>Spring的IOC、AOP</h4><blockquote><ul><li><strong>IOC</strong> : 依赖注入、控制反转。<br>平常开发中，通常是new一个依赖类再调用类实例的方法，而这种new出来的实例不好统一管理。Spring的依赖注入就是由Spring容器帮助我们初始化实例并注入到需要的类中</li></ul></blockquote><p> <strong>IOC实现方式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Set注入</span><br><span class="line">2. 构造器注入</span><br><span class="line">3. 静态工厂的方法注入</span><br><span class="line">4. 实例工厂的方法注入</span><br></pre></td></tr></table></figure></p><blockquote><ul><li><strong>AOP</strong> : 面向切面编程<br>将多个类的公共行为封装到一个可重用的模块，减少系统的重复代码，降低模块之间的耦合度。比如权限的验证，日志的记录都会使用到AOP</li></ul></blockquote><h4 id="JVM的工作原理"><a href="#JVM的工作原理" class="headerlink" title="JVM的工作原理"></a>JVM的工作原理</h4><blockquote><p>Java是一种技术，它由四方面组成：Java编程语言、Java类文件格式、Java虚拟机和Java应用程序接口(Java API)。它们的关系如下图所示：<br><img src="https://raw.githubusercontent.com/java2ming/image/master/java/jvm/1.gif" alt="enter image description here"></p></blockquote><h4 id="SpringCloud实现负载均衡的组件"><a href="#SpringCloud实现负载均衡的组件" class="headerlink" title="SpringCloud实现负载均衡的组件"></a>SpringCloud实现负载均衡的组件</h4><blockquote><p><strong>Spring Cloud各组件总结归纳</strong><br><strong>润物无声，融合在每个微服务中、依赖其它组件并为其提供服务。</strong></p><ul><li><strong>Ribbon</strong>，客户端负载均衡，特性有区域亲和、重试机制。</li><li><strong>Hystrix</strong>，客户端容错保护，特性有服务降级、服务熔断、请求缓存、请求合并、依赖隔离。</li><li><strong>Feign</strong>，声明式服务调用，本质上就是Ribbon+Hystrix。</li><li><strong>Bus</strong>，消息总线，配合Config仓库修改的一种Stream实现，</li><li><strong>Sleuth</strong>，分布式服务追踪，需要搞清楚TraceID和SpanID以及抽样，如何与ELK整合。</li><li><strong>Stream</strong>，消息驱动，有Sink、Source、Processor三种通道，特性有订阅发布、消费组、消息分区。</li></ul></blockquote><blockquote><p><strong>独挑大梁，独自启动不需要依赖其它组件。</strong></p><ol><li><strong>Eureka</strong>，服务注册中心，特性有失效剔除、服务保护。</li><li><strong>Dashboard</strong>，Hystrix仪表盘，监控集群模式和单点模式，其中集群模式需要收集器Turbine配合。</li><li><strong>Zuul</strong>，API服务网关，功能有路由分发和过滤。</li><li><strong>Config</strong>，分布式配置中心，支持本地仓库、SVN、Git、Jar包内配置等模式，</li></ol></blockquote><blockquote><p><strong>每个组件都不是平白无故的产生的，是为了解决某一特定的问题而存在。</strong></p><ol><li>Eureka和Ribbon，是最基础的组件，一个注册服务，一个消费服务。</li><li>Hystrix为了优化Ribbon、防止整个微服务架构因为某个服务节点的问题导致崩溃，是个保险丝的作用。</li><li>Dashboard给Hystrix统计和展示用的，而且监控服务节点的整体压力和健康情况。</li><li>Turbine是集群收集器，服务于Dashboard的。</li><li>Feign是方便我们程序员些更优美的代码的。</li><li>Zuul是加在整个微服务最前沿的防火墙和代理器，隐藏微服务结点IP端口信息，加强安全保护的。</li><li>Config是为了解决所有微服务各自维护各自的配置，设置一个同意的配置中心，方便修改配置的。</li><li>Bus是因为config修改完配置后各个结点都要refresh才能生效实在太麻烦，所以交给bus来通知服务节点刷新配置的。</li><li>Stream是为了简化研发人员对MQ使用的复杂度，弱化MQ的差异性，达到程序和MQ松耦合。</li><li>Sleuth是因为单次请求在微服务节点中跳转无法追溯，解决任务链日志追踪问题的。</li></ol></blockquote><blockquote><p><strong>特殊成员Zipkin</strong></p><ol><li>之所以特殊是因为从jar包和包名来看它不属于Spring Cloud的一员，但是它与Spring Cloud Sleuth的抽样日志结合的天衣无缝。乍一看它与Hystrix的Dashboard作用有重叠的部分，但是他们的侧重点完全不同。Dashboard侧重的是单个服务的统计和是否可用，Zipkin侧重的监控环节时长。简言之，Dashboard侧重故障诊断，Ziokin侧重性能优化。</li></ol></blockquote><h4 id="了解过微服务框架吗"><a href="#了解过微服务框架吗" class="headerlink" title="了解过微服务框架吗"></a>了解过微服务框架吗</h4><blockquote><p><a href="https://docs.spring.io/spring-boot/docs/1.5.6.RELEASE/reference/htmlsingle/" target="_blank" rel="noopener">SpringBoot官方文档</a><br><a href="https://springcloud.cc/spring-cloud-brixton.html" target="_blank" rel="noopener">SpringCloud中文社区</a></p></blockquote><h4 id="StringBuffer、StringBuliuder的区别"><a href="#StringBuffer、StringBuliuder的区别" class="headerlink" title="StringBuffer、StringBuliuder的区别"></a>StringBuffer、StringBuliuder的区别</h4><blockquote><p>StringBuilder:是 Java 5 中引入的，它和 StringBuffer 的方法完全相同，区别在于它是在单线程环境下使用的， 因为它的所有方面都没有被 synchronized 修饰，因此它的效率也比 StringBuffer  要高</p></blockquote><h4 id="Java中有多少种排序算法，说说自己熟悉的算法"><a href="#Java中有多少种排序算法，说说自己熟悉的算法" class="headerlink" title="Java中有多少种排序算法，说说自己熟悉的算法"></a>Java中有多少种排序算法，说说自己熟悉的算法</h4><p><a href="http://www.runoob.com/w3cnote/sort-algorithm-summary.html" target="_blank" rel="noopener">排序算法总结–菜鸟教程</a></p><h4 id="常用的设计模式"><a href="#常用的设计模式" class="headerlink" title="常用的设计模式"></a>常用的设计模式</h4><p><a href="http://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">设计模式–菜鸟教程</a></p><h4 id="为什么不使用select"><a href="#为什么不使用select" class="headerlink" title="为什么不使用select *"></a>为什么不使用select *</h4><blockquote><p>其实走不走索引，关键取决于where后面包括还是不包括创建聚集索引的时候的第一个字段<br>或者创建非聚集索引的时候的第一个字段；跟select <em>没有关系的，select </em> 最大的影响就是额外的IO开销</p></blockquote><h4 id="了解过Redis的实现原理吗"><a href="#了解过Redis的实现原理吗" class="headerlink" title="了解过Redis的实现原理吗"></a>了解过Redis的实现原理吗</h4><blockquote><p>Redis 为了达到最快的读写速度将数据都读到内存中，并通过异步的方式将数据写入磁盘。所以 redis 具有快速和 数据持久化的特征。如果不将数据放在内存中，磁盘 I/O 速度为严重影响 redis 的性能</p><p></p><h5>Redis数据结构： 五种 </h5><br>String——字符串<br>Hash——字典<br>List——列表<br>Set——集合<br>Sorted Set——有序集合<p></p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试题 </tag>
            
            <tag> 平安 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java常见面试题【1】</title>
      <link href="/2018/06/08/java-interview-1/"/>
      <url>/2018/06/08/java-interview-1/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>近期再找工作,复习一波面试题，整理一下常见的Java面试题</p></blockquote><a id="more"></a><h4 id="ArrayList的默认长度"><a href="#ArrayList的默认长度" class="headerlink" title="ArrayList的默认长度"></a>ArrayList的默认长度</h4><blockquote><p>ArrayList的底层是由一个Object[]数组构成的，而这个Object[]数组，默认的长度是10,size()方法，指的是“逻辑”长度。<br>所谓“逻辑”长度，是指内存已存在的“实际元素的长度” 而“空元素不被计算”<br>        即：当你利用add()方法，向ArrayList内添加一个“元素”时，逻辑长度就增加1位。 而剩下的9个空元素不被计算。<br>        每次增长 (旧容量*3/2)+1</p></blockquote><h4 id="Lock与synchronized-的区别"><a href="#Lock与synchronized-的区别" class="headerlink" title="Lock与synchronized 的区别"></a>Lock与synchronized 的区别</h4><blockquote><ol><li>线程A和B都要获取对象O的锁定，假设A获取了对象O锁，B将等待A释放对O的锁定，<br> 如果使用 synchronized ，如果A不释放，B将一直等下去，不能被中断<br>如果使用 ReentrantLock，如果A不释放，可以使B在等待了足够长的时间以后，中断等待，而干别的事情</li><li>synchronized是在JVM层面上实现的，不但可以通过一些监控工具监控synchronized的锁定，而且在代码执行时出现异常，JVM会自动释放锁定，但是使用Lock则不行，lock是通过代码实现的，要保证锁定一定会被释放，就必须将unLock()放到finally{}中</li><li>在资源竞争不是很激烈的情况下，Synchronized的性能要优于ReetrantLock，但是在资源竞争很激烈的情况下，Synchronized的性能会下降几十倍，但是ReetrantLock的性能能维持常态</li></ol></blockquote><h4 id="mysql索引类型"><a href="#mysql索引类型" class="headerlink" title="mysql索引类型"></a>mysql索引类型</h4><ol><li>普通索引</li><li>唯一索引</li><li>主键索引</li><li>组合索引</li><li>全文索引</li></ol><h4 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h4><blockquote><p>事务特性分为四个：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持续性（Durability）简称ACID。</p></blockquote><ul><li><strong>原子性（Atomicity）</strong>:   事务是数据库逻辑工作单元，事务中包含的操作要么都执行成功，要么都执行失败。</li><li><strong>一致性（Consistency）</strong>： 事务执行的结果必须是使数据库数据从一个一致性状态变到另外一种一致性状态。当事务执行成功后就说数据库处于一致性状态。如果在执行过程中发生错误，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这是数据库就处于不一致状态。</li><li><strong>隔离性（Isolation）</strong>：一个事务的执行过程中不能影响到其他事务的执行，即一个事务内部的操作及使用的数据对其他事务是隔离的，并发执行各个事务之间无不干扰。</li><li><strong>持续性（Durability）</strong>：即一个事务执一旦提交，它对数据库数据的改变是永久性的。之后的其它操作不应该对其执行结果有任何影响。</li></ul><h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><blockquote><ol><li>事务的隔离级别也分为四种，由低到高依次分别为：</li></ol><ul><li><strong>read uncommited（读未提交）</strong>：是最低的事务隔离级别，它允许另外一个事务可以看到这个事务未提交的数据。</li><li><strong>read commited（读提交）</strong>：保证一个事物提交后才能被另外一个事务读取。另外一个事务不能读取该事物未提交的数据。</li><li><strong>read repeatable（读重复）</strong>：这种事务隔离级别可以防止脏读，不可重复读。但是可能会出现幻象读。它除了保证一个事务不能被另外一个事务读取未提交的数据之外还避免了以下情况产生（不可重复读）。</li><li><strong>serializable（序列化）</strong>：这是花费最高代价但最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读之外，还避免了幻象读。</li></ul></blockquote><blockquote><ol start="2"><li>脏读、不可重复读、幻象读概念说明：</li></ol><ul><li><strong>脏读</strong>：指当一个事务正字访问数据，并且对数据进行了修改，而这种数据还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据还没有提交那么另外一个事务读取到的这个数据我们称之为脏数据。依据脏数据所做的操作肯能是不正确的。</li><li><strong>不可重复读</strong>：指在一个事务内，多次读同一数据。在这个事务还没有执行结束，另外一个事务也访问该同一数据，那么在第一个事务中的两次读取数据之间，由于第二个事务的修改第一个事务两次读到的数据可能是不一样的，这样就发生了在一个事物内两次连续读到的数据是不一样的，这种情况被称为是不可重复读。</li><li><strong>幻读</strong>：一个事务先后读取一个范围的记录，但两次读取的纪录数不同，我们称之为幻象读（两次执行同一条 select 语句会出现不同的结果，第二次读会增加一数据行，并没有说这两次执行是在同一个事务中）</li></ul></blockquote><h4 id="spring事务传播特性"><a href="#spring事务传播特性" class="headerlink" title="spring事务传播特性"></a>spring事务传播特性</h4><pre><code>&gt; 事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。spring支持7种事务传播行为：</code></pre><ul><li><strong>propagation_requierd</strong>：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。</li><li><strong>propagation_supports</strong>：支持当前事务，如果没有当前事务，就以非事务方法执行。</li><li><strong>propagation_mandatory</strong>：使用当前事务，如果没有当前事务，就抛出异常。</li><li><strong>propagation_required_new</strong>：新建事务，如果当前存在事务，把当前事务挂起。</li><li><strong>propagation_not_supported</strong>：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li><strong>propagation_never</strong>：以非事务方式执行操作，如果当前事务存在则抛出异常。</li><li><strong>propagation_nested</strong>：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作<blockquote><p>Spring 默认的事务传播行为是 PROPAGATION_REQUIRED，它适合于绝大多数的情况。假设 ServiveX#methodX() 都工作在事务环境下（即都被 Spring 事务增强了），假设程序中存在如下的调用链：Service1#method1()-&gt;Service2#method2()-&gt;Service3#method3()，那么这 3 个服务类的 3 个方法通过 Spring 的事务传播机制都工作在同一个事务中。</p></blockquote></li></ul><h4 id="SQL数据库中的范式"><a href="#SQL数据库中的范式" class="headerlink" title="SQL数据库中的范式"></a>SQL数据库中的范式</h4><pre><code>&gt; 事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。spring支持7种事务传播行为：</code></pre><ul><li><p><strong>第一范式（1NF）</strong>：强调的是列的原子性，即列不能够再分成其他几列。</p><blockquote><p>考虑这样一个表：【联系人】（姓名，性别，电话）<br>如果在实际场景中，一个联系人有家庭电话和公司电话，那么这种表结构设计就没有达到 1NF。要符合 1NF 我们只需把列（电话）拆分，即：【联系人】（姓名，性别，家庭电话，公司电话）。1NF 很好辨别，但是 2NF 和 3NF 就容易搞混淆。</p></blockquote></li><li><p><strong>第二范式（2NF）</strong>：首先是 1NF，另外包含两部分内容，一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。</p><blockquote><p>考虑一个订单明细表：【OrderDetail】（OrderID，ProductID，UnitPrice，Discount，Quantity，ProductName）。<br>因为我们知道在一个订单中可以订购多种产品，所以单单一个 OrderID 是不足以成为主键的，主键应该是（OrderID，ProductID）。显而易见 Discount（折扣），Quantity（数量）完全依赖（取决）于主键（OderID，ProductID），而 UnitPrice，ProductName 只依赖于 ProductID。所以 OrderDetail 表不符合 2NF。不符合 2NF 的设计容易产生冗余数据。<br>可以把【OrderDetail】表拆分为【OrderDetail】（OrderID，ProductID，Discount，Quantity）和【Product】（ProductID，UnitPrice，ProductName）来消除原订单表中UnitPrice，ProductName多次重复的情况。</p></blockquote></li><li><p><strong>第三范式（3NF）</strong>：首先是 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。</p><blockquote><p>考虑一个订单表【Order】（OrderID，OrderDate，CustomerID，CustomerName，CustomerAddr，CustomerCity）主键是（OrderID）。<br>其中 OrderDate，CustomerID，CustomerName，CustomerAddr，CustomerCity 等非主键列都完全依赖于主键（OrderID），所以符合 2NF。不过问题是 CustomerName，CustomerAddr，CustomerCity 直接依赖的是 CustomerID（非主键列），而不是直接依赖于主键，它是通过传递才依赖于主键，所以不符合 3NF。<br>通过拆分【Order】为【Order】（OrderID，OrderDate，CustomerID）和【Customer】（CustomerID，CustomerName，CustomerAddr，CustomerCity）从而达到 3NF。</p></blockquote><p>  第二范式（2NF）和第三范式（3NF）的概念很容易混淆，区分它们的关键点在于，2NF：非主键列是否完全依赖于主键，还是依赖于主键的一部分；3NF：非主键列是直接依赖于主键，还是直接依赖于非主键列。</p></li></ul><h4 id="JDK并发包-java-util-concurrent"><a href="#JDK并发包-java-util-concurrent" class="headerlink" title="JDK并发包 java.util.concurrent"></a>JDK并发包 java.util.concurrent</h4><p><img src="https://raw.githubusercontent.com/java2ming/image/master/java/concurrent/1.jpg" alt="JDK并发包框架"></p><blockquote><p>外层框架主要有Lock(ReentrantLock、ReadWriteLock等)、同步器（semaphores等）、阻塞队列（BlockingQueue等）、Executor（线程池）、并发容器（ConcurrentHashMap等）、还有Fork/Join框架；<br>内层有AQS（AbstractQueuedSynchronizer类，锁功能都由他实现）、非阻塞数据结构、原子变量类(AtomicInteger等无锁线程安全类)三种。<br>底层就实现是volatile和CAS。整个并发包其实都是由这两种思想构成的。</p></blockquote><h4 id="JDK8新特性"><a href="#JDK8新特性" class="headerlink" title="JDK8新特性"></a>JDK8新特性</h4><blockquote><p> <strong>Lambda 表达式</strong> − Lambda允许把函数作为一个方法的参数（函数作为参数传递进方法中)。<br>    <strong>方法引用</strong> − 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。<br>    <strong>默认方法</strong> − 默认方法就是一个在接口里面有了一个实现的方法。新增了default方法和static方法，这两种方法可以有方法体<br>    <strong>新工具 − 新的编译工具</strong>，如：Nashorn引擎 jjs、 类依赖分析器jdeps。<br>    <strong>Stream API</strong> −新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。<br>    <strong>Date Time API</strong> − 加强对日期与时间的处理。<br>    <strong>Optional 类</strong> − Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。<br>    <strong>Nashorn, JavaScript 引擎</strong> − Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。</p></blockquote><h4 id="UDP、TCP区别"><a href="#UDP、TCP区别" class="headerlink" title="UDP、TCP区别"></a>UDP、TCP区别</h4><blockquote><p>TCP是建立可靠连接，并且通信双方都可以以流的形式发送数据。相对TCP，UDP则是面向无连接的协议。<br>使用UDP协议时，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发数据包。但是，能不能到达就不知道了。<br>虽然用UDP传输数据不可靠，但它的优点是和TCP比，速度快，对于不要求可靠到达的数据，就可以使用UDP协议。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
